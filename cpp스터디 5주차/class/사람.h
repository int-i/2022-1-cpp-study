#pragma once
#include <iostream>
using std::cin;
using std::cout;
using std::endl;

using std::string;

enum role{ 비회원, 관리자, 정회원 };


class 사람 {
	// 접근 지정자: 클래스 외부에서 접근 할 수 있는 수준을 설정
	// public: 모든 곳에서 접근 가능
	// private: 해당 클래스 내에서만 접근 가능
	// protected: 해당 클래스 및 상속받은 자식에서만 접근 가능(다음주에 할 예정)
public:
	// public에는 주로 생성자, 멤버함수(메서드)가 온다.
	// 기본생성자: 매개변수가 없는 생성자
	// 클래스의 생성자를 하나도 만들지 않으면 컴파일러가 자동으로 내용 없는 기본생성자를 만들게 된다.
	사람() {
		// 매개변수가 없으므로 빈 값으로 초기화
		이름 = "";
		나이 = 0;
		성별 = "";
	}

	// 생성자 오버로딩 된 일반적인 생성자
	// 오버로딩이란? 같은 이름에 매개변수가 다른 함수를 여러개 만들 수 있다.
	// 생성자도 함수의 일종이기 때문에 기본 생성자를 오버로딩해
	// 기본 생성자와는 다른 생성자도 여럿 만들 수 있다.

	// 생성자의 역할: 생성자는 클래스를 통해 객체를 생성할 때 호출되며,
	// 생성되는 객체를 초기화 하는 역할을 한다.
	// 생성자는 반환형이 없다.
	사람(string 이름, int 나이, string 성별) {
		// 만약 매개변수의 이름과 멤버변수의 이름이 같다면
		// this 포인터를 사용해 멤버변수를 가리킬 수 있다.
		this->이름 = 이름;
		this->나이 = 나이;
		this->성별 = 성별;

		// 위의 코드를 보면 this를 통해 멤버변수를 가리키고 있고,
		// 그 멤버변수에 매개변수 값들을 대입해서 멤버변수를 초기화 해주고 있다.
	}

	// 소멸자: 생성자와는 반대로 객체가 소멸할때 호출 된다.
	// 자동할당과 동적할당에서 호출되는 시점이 각각 다름
	// 자동할당으로 객체가 생성된 경우 객체가 스코프를 벗어났을 때 호출되고
	// 동적할당으로 객체가 생성된 경우 delete를 통해 객체가 삭제되었을 때 호출 된다.
	~사람() {}

	void 정보_보기() {
		cout << "이름: " << 이름 << endl
			<< "나이: " << 나이 << endl
			<< "성별: " << 성별 << endl;
	}

	void 잠(int 시간) {
		cout << 이름 << "은(는) " << 시간 << "시간 동안 잠을 잤다." << endl;
	}

	void 공부(int 시간) {
		cout << 이름 << "은(는) " << 시간 << "시간 동안 공부를 했다." << endl;
	}

	// get 함수: private에 있는 멤버변수는 외부에서 직접 접근이 불가능하니
	// 이런식으로 값에 간접적으로 접근 할 수 있게끔 한다.
	string get_이름() {
		int 권한 = 비회원;

		if (권한 == 관리자)
			return 이름;
		else
			return "권한이 없습니다.";
	}

	int get_나이() {
		return 나이;
	}

	string get_성별() {
		return 성별;
	}

	// set 함수: get함수와 마찬가지로 private에 있는 멤버변수는 외부에서 직접 접근이 불가능하니
	// 이런식으로 간접적으로 값을 바꿀 수 있게끔 한다.
	void set_이름(string 이름) {
		int 권한 = 비회원;

		if (권한 == 관리자)
			this->이름 = 이름;
		else
			cout << "권한이 없습니다." << endl;
	}

	void set_나이(int 나이) {
		this->나이 = 나이;
	}

	void set_성별(string 성별) {
		this->성별 = 성별;
	}

private:
	// private에는 주로 멤버변수(필드)가 온다.
	// 멤버변수는 해당 클래스를 통해 생성한 객체의 데이터들!
	// 사람이라는 클래스의 객체를 만들면 그 객체의 요소로 이름, 나이, 성별 가지게 된다.
	// 같은 클래스를 통해 생성된 모든 객체들은 전부 같은 멤버변수를 가진다.
	// 하지만 각 멤버변수들의 값은 전부 다르다.
	string 이름;
	int 나이;
	string 성별;
};